######## Components #########

components are independent and reusable bits of code. 
they serve the same purpose as js function but work 
in isolation and return html/jsx.

######## JSX #########

JSX allows us to write html in react.
JSX makes it easier to write and add html in react.

######## Expression in JSX #########

with JSX you can write expression inside curly braces.
The Expression can be a react variable, or property,
or any other valid javascript expression.
JSX will execute the expression and return the result.

######## Lists #########

In react, you will render lists with some type of loop.
the javascript map() array method is generally
preffered method.

######## Props #########

1 : Props / Properties are arguments passed into react components.
2 : Props allows us to pass data from parent component to child component.
3 : Props are passed to components via HTML atrributes.

######## Coditional Rendering #########

Conditional rendering allows us to dynamically display
different UI component or content based on specific
conditions. This enables us to create more interactive
and responsive user experience.

######## State #########

State is a way to store and manage data that can change
over time and affects how the component render. we define
state using the useState hook, which allows you to set 
an initial value and provide a way to update that state.

######## Hooks #########

Hooks are a new addition inreact 16.8. They let you
use state and other react features without writing a class.

######## useState() #########

useState hook allows us to track state in a functional
component. State generally referes to data or Properties
that need to be tracking in an application.

######## Portal #########

Portal is a feature that allows you to render a child
component into a DOM node that exist outside the hierarchy
of the parent component. This can be useful for scenarios
like modal, tooltips, or dropdowns, where you want to
break out of the usual parent-child structure and
render in a different part of the DOM

######## useEffect() #########

useEffect hook allows you to perform side effects in your
components. Some example of side effects are: fetching
data, directly updating the DOM etc.

######## Prop Drilling #########

Prop Drilling is the act of passing data, in this case, 
react props, through several nested layers of components 
before it reaches the component that needs the data.

######## Context API #########

Context API is a feature that allows you to manage
and share state across your component tree without
having to pass prop down manually at every level.
It's usefull for scenarios where you need to share
data or functions across many components especially
when these components are deeply nested.

######## useContext() #########

useContext hook allows us to access the context values
provided by a context object directly within a functional
component. Context provides a way to pass data through
the component tree without having to pass props down
manually at every level.

######## useReducer() #########

useReducer is a hook that is similiar to useState, but
it is designed for more complex state objects or state
transitions that involves multiple sub-values.
it allows you to manage state in a functional, 
immutable way.

######## useRef() #########

useRef hook provides a way to access and interact with
DOM elements or to persist values across renders without
causing a re-render.

######## Custom Hooks #########

Custom hooks are javaScript functions that start with the
prefix 'use' (e.g., useFetch, useForm) and can call
other hooks within them. They allow you to extract and
reuse logic that involves state or side effects, making
your components more readable and maintainable.

######## useId() #########

The useId hook in react is used to generate unique
IDs for components
